<?xml version="1.0" encoding="UTF-8"?>

<!-- This file contains the definitions of components associated with traits such as
      Characts, skills, special abilities, etc.
-->

<document signature="Hero Lab Structure">

  <!-- Trait component
        All traits derive from this component and share these mechanisms in common
  -->
  <component
    id="Trait"
    name="Trait"
    autocompset="no"
    hasshortname="yes"
    ispublic="no">

    <!-- Abbreviation for use in places like the TacCon -->
    <field
      id="trtAbbrev"
      name="Abbreviation"
      type="static"
      maxlength="5">
      </field>

    <!-- Minimum user-assigned value for the trait -->
    <field
      id="trtMinimum"
      name="Minimum Value"
      type="derived">
      </field>

    <!-- Maximum user-assigned value for the trait -->
    <field
      id="trtMaximum"
      name="Maximum Value"
      type="derived"
      defvalue="10">
      </field>

    <!-- User value assigned for the trait -->
    <field
      id="trtUser"
      name="User Value"
      type="user"
      usedelta="yes"
      maxfinal="50">
      <!-- Bound the user value to the limits established for the trait -->
      <bound phase="Traits" priority="1000" name="Bound trtUser">
        <before name="Calc trtFinal"/><![CDATA[
        @minimum = field[trtMinimum].value
        @maximum = field[trtMaximum].value
        ]]></bound>
      <!-- Final value for display is the fully adjusted net value that incorporates
            all adjustments from other sources
      -->
      <finalize><![CDATA[
        ~if we're in creation mode and not autonomous, we can't be modified
        if (hero.tagis[mode.creation] + !autonomous >= 2) then
          @text = "{bmp forbidden_up}"
        else
          @text = field[trtFinal].value
          endif
        ]]></finalize>
      </field>

    <!-- Bonuses applied to the trait (e.g. from other abilities) -->
    <field
      id="trtBonus"
      name="Bonus Value"
      type="derived">
      </field>

    <!-- In-play bonuses applied to the trait -->
    <field
      id="trtInPlay"
      name="In-Play Bonus"
      type="derived">
      </field>

    <!-- Final value for the trait -->
    <field
      id="trtFinal"
      name="Final Value"
      type="derived"
	  maxfinal="25">
	  
      <!-- Calculate the final value from the three distinct pieces -->
      <calculate phase="Traits" priority="3000" name="Calc trtFinal"><![CDATA[
        ~Note! If you change this calculation, you may need to change the similar
        ~       calculation in the "Derived" component.
        @value = field[trtUser].value + field[trtBonus].value + field[trtInPlay].value
        ]]></calculate>
		      <!-- Final value for display is the fully adjusted net value that incorporates
            all adjustments from other sources
      -->
      <finalize><![CDATA[
        
        if (hero.tagis[DmgMod.?] + tagis[thingid.trDmgMod] >= 2) then
          @text = hero.tagnames[DmgMod.?," "]
        elseif (tagis[thingid.trInit] + tagis[thingid.trExpMod] + tagis[thingid.trHealRate] >= 1) then
		  if (@value >= 0) then
			@text = "+" & @text
	      else
            @text = field[trtFinal].value
          endif
		else
          @text = field[trtFinal].value
          endif
        ]]></finalize>
      </field>

    <!-- Set the delta for the user value to be the current bonuses
        NOTE! This is necessary so incrementers have proper values when edited by the user.
        -->
    <eval index="1" phase="Render" priority="5000"><![CDATA[
      field[trtUser].delta = field[trtBonus].value + field[trtInPlay].value
      ]]></eval>

    <!-- If the trait is at its minimum/maximum, assign a tag to preclude further advancements -->
    <eval index="2" phase="Final" priority="5000"><![CDATA[
      ~base our test on the adjusted trait value, sans any in-play adjustments
      var trait as number
      trait = field[trtUser].value + field[trtBonus].value
      if (trait <= field[trtMinimum].value) then
        perform assign[Helper.Minimum]
      elseif (trait >= field[trtMaximum].value) then
        perform assign[Helper.Maximum]
        endif
      ]]></eval>

    </component>


  <!-- Charact component
        Each Charact possessed by the actor derives from this component
  -->
  <component
    id="Charact"
    name="Charact"
    autocompset="no">

    <!-- Characts have a minimum trait value of 1 -->
    <eval index="1" phase="Initialize" priority="3000"><![CDATA[
      field[trtMinimum].value = 1
      field[trtMaximum].value = 200
      ]]></eval>

    <!-- Each Charact point above one that is allocated by the user costs 7 CP -->
    <eval index="2" phase="Traits" priority="10000">
      <before name="Calc resLeft"/>
      <after name="Bound trtUser"/><![CDATA[
      hero.child[resCP].field[resSpent].value += (field[trtUser].value - 1) * 7
      ]]></eval>

    </component>

	

  <!-- Skill component
        Each skill derives from this component
  -->
  <component
    id="Skill"
    name="Skill"
    autocompset="no">

    <!-- Net final roll that includes the value of the linked Charact -->
    <field
      id="sklRoll"
      name="Net Skill Roll"
      type="derived">
      <calculate phase="Final" priority="5000">
        <after name="Calc trtFinal"/><![CDATA[
        ~only access the linkage if the skill is directly on the hero; if not, it is
        ~likely within an advancement gizmo and no linkage will exist there
        if (container.ishero <> 0) then
          @value = field[trtFinal].value + linkage[Char1].field[trtFinal].value + linkage[Char2].field[trtFinal].value
          endif
        ]]></calculate>
      </field>
	  
    <!-- Each skill is associated with a specific Charact that must be identified -->
    <linkage linkage="Char1" optional="no"/>
    <linkage linkage="Char2" optional="no"/>

    <!-- Each skill needs its own identity tag so existing skills can be identified during advancement -->
    <identity group="Skill"/>
	

    <creation><![CDATA[
      ~custom items need to pick a name
      if (tagis[Helper.CustomItem] <> 0) then
        ~field[username].text = "Enter Name"
        endif
      ]]></creation>	

    <!-- Every skill is shown on the "Rolls" mouse-over on the Dashboard/TacCon -->
    <tag group="DashTacCon" tag="Rolls"/>
    <tag group="User" tag="NoAutoName"/>
		
	<eval index="1" phase="Initialize" priority="3000"><![CDATA[
      field[trtMinimum].value = 1
      field[trtMaximum].value = 200
      ]]></eval>
    <!-- Track the skill on the actor -->
    <eval index="2" phase="Setup" priority="5000"><![CDATA[
      perform forward[Skill.?]
      ]]></eval>
	  
    <!-- Calculate the skill as appropriate -->
    <eval value="3" phase="Traits" priority="4000">
      <before name="Derived trtFinal"/>
      <after name="Calc trtFinal"/><![CDATA[
	  doneif (container.ishero = 0)
	  var val as number
	  val = linkage[Char1].field[trtFinal].value + linkage[Char2].field[trtFinal].value
      field[trtBonus].value = val
      ]]></eval>
	  
    <!-- Each skill point that is allocated by the user costs 2 CP -->
    <eval index="4" phase="Traits" priority="10000">
      <before name="Calc resLeft"/>
      <after name="Bound trtUser"/><![CDATA[
      ~if this skill is not added directly to the hero (i.e. an advance), skip it entirely
      doneif (origin.ishero = 0)

      ~adjust the resource appropriately
      hero.child[resCP].field[resSpent].value += field[trtUser].value * 2
      ]]></eval>


    </component>


  <!-- Ability component
        Each special ability derives from this component
  -->
  <component
    id="Ability"
    name="Ability"
    autocompset="no"
    panellink="abilities">

    <!-- Activation state of ability - we're not activated by default -->
    <field
      id="abilActive"
      name="Is Activated?"
      type="user"
      minvalue="0"
      maxvalue="1">
      </field>

    <!-- Each ability needs its own identity tag to detect cascading dependencies via prereqs -->
    <identity group="Ability"/>

    <!-- Setup an identity tag group to track all activated abilities and adjustments -->
    <identity group="Activated"/>

    <!-- All abilities get the same tag for sorting purposes -->
    <tag group="SpecialTab" tag="Ability"/>

    <!-- Each ability that is added by the user costs 1 slot -->
    <eval index="1" phase="Setup" priority="5000"><![CDATA[
      ~we must ignore bootstrapped abilities from races and abilities added via advances
      if (isuser + origin.ishero >= 2) then
        hero.child[resAbility].field[resSpent].value += 1
        endif
      ]]></eval>

    <!-- Track the ability on the actor -->
    <eval index="2" phase="Setup" priority="5000"><![CDATA[
      perform forward[Ability.?]
      ]]></eval>

    <!-- If the ability is activated, designate it appropriately -->
    <eval index="3" phase="Setup" priority="100"><![CDATA[
      ~if we're not able to be activated, we don't qualify
      doneif (tagis[User.Activation] = 0)

      ~if we've been activated by the user, mark ourselves as activated; in addition,
      ~forward our identity tag to our parent actor; this allows the actor to track
      ~when abilities are activated and reflect the state to the user
      if (field[abilActive].value <> 0) then
        perform assign[Helper.Activated]
        perform forward[Activated.?]
        endif
      ]]></eval>

    <!-- Verify abilities that are only available at creation -->
    <prereq message="Only available during character creation.">
      <validate><![CDATA[
        ~we only report this as a failure things (once added, we assume the user knows best)
        validif (@ispick <> 0)

        ~if we are not designated as creation only, we're valid
        validif (altthing.tagis[User.CreateOnly] = 0)

        ~if the mode is creation, we're valid
        validif (state.iscreate <> 0)
        ]]></validate>
      </prereq>

    </component>


  <!-- Derived component
        Each derived trait (calculated from other traits) is based upon this component
  -->
  <component
    id="Derived"
    name="Derived Trait"
    autocompset="no">

    <!-- Derived traits are based on other traits. The "calculate" script on the
        "trtFinal" field value will work great for most traits, but NOT for derived
        traits. Consequently, derived traits need to re-calculate the field value AFTER
        the traits derived from are properly calculated. So the individual calculation
        scripts for each derived trait must occur AFTER the initial "trtFinal"
        calculation and BEFORE this derived calculation. We can also omit any "user"
        value from the calculation since derived traits have no user-defined facet.
        -->
    <eval index="1" phase="Traits" priority="6000" name="Derived trtFinal"><![CDATA[
      field[trtFinal].value = field[trtBonus].value + field[trtInPlay].value
      ]]></eval>

    </component>


  <!-- Race component
        Each race derives from this component
  -->
  <component
    id="Race"
    name="Race"
    autocompset="no">

    <!-- Each race needs its own identity tag to configure the hero appropriately -->
    <identity group="Race"/>

    <!-- Track the race on the actor by assigning the appropriate tag -->
    <eval index="1" phase="Setup" priority="5000"><![CDATA[
      perform forward[Race.?]
	  perform hero.delete[HideTab.hitloc]
      ]]></eval>

    </component>

  <!-- HitLoc component
        Used for creating hit locations
  -->
  <component
    id="HitLoc"
    name="Hit Location"
	autocompset="no"
    hasshortname="yes"
    ispublic="yes">
	
	<!-- Damage to be sustained or healed -->
    <field
      id="hlDamage"
      name="Damage"
      type="user"
      minvalue="0"
      maxvalue="99">
      </field>

    <!-- Minimum (starting) HP for the hitlocation -->
    <field
      id="hlHPMin"
      name="Min HP"
      type="derived">
      <!-- Calculate the base health value for the actor from its pieces. We have to
            calculate the value from its pieces instead of just getting the net trait
            value. This is because Health must be calculated BEFORE the final value
            for derived traits, since derived traits may be influenced by the net health
            (e.g. attack penalties after taking sufficient damage).
      -->
      <calculate phase="PreTraits" priority="5000" name="Calc hlHPMin"><![CDATA[
        @value = field[trtBonus].value + field[trtInPlay].value
        ]]></calculate>
      </field>

    <!-- Bonus health for the actor -->
    <field
      id="hlHPBonus"
      name="Bonus HP"
      type="derived">
      <!-- Calculate any health bonus that the actor receives from other sources.
      -->
      <calculate phase="Traits" priority="5000" name="Calc hlHPBonus"><![CDATA[
        ~.... add any suitable code here to calculate this for the game system ....
        ~@value = 0
        ]]></calculate>
      </field>

    <!-- Maximum health for the actor -->
    <field
      id="hlHPMax"
      name="Max HP"
      type="derived">
      <!-- Calculate the maximum health for the actor as the minimum plus any bonus.
      -->
      <calculate phase="Traits" priority="5002" name="Calc hlHPMax">
        <after name="Calc hlHPMin"/>
        <after name="Calc hlHPBonus"/><![CDATA[
		@value = field[trtBonus].value
		]]></calculate>
      </field>

    <!-- Current health -->
    <field
      id="hlHPNow"
      name="Current HP"
      type="derived">
      <!-- Calculate the current health for the actor based on the maximum and any
            actual damage that has been sustained.
      -->
      <calculate phase="Traits" priority="5100" name="Calc hlHPNow">
        <after name="Calc hlHPMax"/><![CDATA[
        @value = field[hlHPMax].value - usagepool[hlHPNet].value
        ]]></calculate>
      </field>

    <!-- Health penalty adjustment due to damage effects -->
    <field
      id="hlHPPenal"
      name="HP Penalty"
      type="derived"
      maxfinal="50">
      <!-- Calculate any penalty adjustment applied due to substantial damage effects.
            For example, if the actor has sustained enough damage, he might suffer
            penalties on attack roles.
      -->
      <calculate phase="Traits" priority="5200" name="Calc hlHPPenal">
        <after name="Calc hlHPNow"/><![CDATA[
          ]]></calculate>
      <!-- Final value for display shows any negative value in red and ignores other values -->
      <finalize><![CDATA[
        if (@value >= 0) then
          @text = ""
        else
          @text = "{text clrwarning}(" & @value & "){text clrreset}"
          endif
        ]]></finalize>
      </field>

    <!-- HP summary for display -->
    <field
      id="hlHPSumm"
      name="HP Summary"
      type="derived"
      maxfinal="50">
      <!-- Calculate a value that is based on all the fields referenced by the
            "finalize" script. This ensures that the field always changes if any of
            its pieces changes, which triggers the finalized value to be updated.
      -->
      <calculate phase="Render" priority="1000">
        <after name="Calc hlHPNow"/><![CDATA[
        ~make sure this value consists of the elements that could cause the summary to change
        @value = field[hlHPNow].value * 10000 + field[hlHPMax].value * 100 + field[hlHPPenal].value
        ]]></calculate>
      <!-- Final value for display show the current and maximum health, plus any
            penalty value in parentheses.
      -->
      <finalize><![CDATA[
        ~@text = field[hlHPNow].value & " / " & field[hlHPMax].value
        if (field[hlHPPenal].value < 0) then
          @text &= " {text clrwarning}(" & field[hlHPPenal].value & "){text clrreset}"
          endif
        ]]></finalize>
      </field>
	 
	 <!-- Each hit location makes use of usage pools to track damage -->
     <usage usagepool="hlHPAdjust"/>
     <usage usagepool="hlHPNet"/>
	  
	      <!-- Each type needs its own identity tag that is forwarded to the hero
          by the actor pick when selected -->
    <identity group="HitLoc"/>
	
    </component>
	
	<!-- Power Info component
        Used for tracking modifiers on powers
  -->
  <component
    id="GizInfo"
    name="Gizmo Info"
    autocompset="no"
	ispublic="no">

    <!-- Tracks the selection made when a menu choice is required -->
    <field
      id="gizChosen"
      name="Chosen Thing / Pick"
      type="user"
      style="menu">
      </field>
	  
    <!-- Tag applied when picked -->
    <field
      id="gizTagExp"
      name="Tag Expression"
      type="derived"
      maxlength="200">
      </field>

    <!-- Tag applied when power options picked -->
    <field
      id="TagExOnThg"
      name="Tag Expression"
      type="derived"
      maxlength="200">
      </field>   

	  <!-- Tag applied when power options picked -->
    <field
      id="gizOptExp1"
      name="Tag Expression"
      type="derived"
      maxlength="200">
      </field>	

	  <!-- Tag applied when power options picked -->
    <field
      id="gizOptExp2"
      name="Tag Expression"
      type="derived"
      maxlength="200">
      </field>
	
    <!-- Assign the tag to the container -->
    <eval index="1" phase="Setup" priority="1000"><![CDATA[
      perform forward[GizInfo.?,parent]
      ]]></eval>

    </component>
	
  <!-- Define various component sets associated with the components defined above.
  -->

  <!-- No compsets are auto-defined for the component -->

  <!-- Charact - all Characts derive from this compset -->
  <compset
    id="Charact"
    forceunique="yes">
    <compref component="Charact"/>
    <compref component="Trait"/>
    <compref component="CanAdvance"/>
    </compset>

  <!-- Skill - all skills derive from this compset -->
  <compset
    id="Skill">
    <compref component="Skill"/>
    <compref component="Trait"/>
    <compref component="Domain"/>
    <compref component="Custom"/>
    <compref component="CanAdvance"/>
    </compset>

  <!-- Ability - all abilities derive from this compset -->
  <compset
    id="Ability">
    <compref component="Ability"/>
    <compref component="Trait"/>
    <compref component="SpecialTab"/>
    <compref component="CanAdvance"/>
    </compset>

  <!-- Trait - all derived traits are based on this compset -->
  <compset
    id="Trait">
    <compref component="Derived"/>
    <compref component="Trait"/>
    </compset>

  <!-- Race - all races derive from this compset -->
  <compset
    id="Race"
    forceunique="yes">
    <compref component="Race"/>
    </compset>

 <compset
    id="HitLoc">
    <compref component="HitLoc"/>
    <compref component="Trait"/>
    </compset>

 <compset
    id="GizInfo">
    <compref component="GizInfo"/>
    <compref component="Custom"/>
    </compset>
	
  <!-- Entity for skill -->
   <entity
	  id="entConfig"
	  defaultthing="GizInfo"
	  form="gizoption">
	  <!-- <bootstrap thing="PowerInfo"/> -->
	  </entity>
  </document>
